#!/usr/local/bin/ruby -w

#--------------------
# Create a nagios schema from the classes
#

require 'getoptlong'
require 'nagios.rb'

result = GetoptLong.new(
	[ "--help",		"-h",            GetoptLong::NO_ARGUMENT ]
)

module Syntax
	@@syntaxes = Hash.new(
		:string => {
			:syntax => "1.3.6.1.4.1.1466.115.121.1.26",
			:equality => "integerMatch"
		},
		:integer => {
			:syntax => "1.3.6.1.4.1.1466.115.121.1.27",
			:equality => "caseIgnoreIA5Match",
			:substr => "caseIgnoreIA5SubstringsMatch"
		},
		:ipaddress => {
			:syntax => "1.3.6.1.4.1.1466.115.121.1.26{128}",
			:equality => "integerMatch"
		}
	)
	def Syntax.config(type)
		return @@syntaxes[type]
	end
end

module Fun
	@@length = 70

	def Fun.pprint(string)
		strings = Array.new
		newstring = ""

		while string.size > 0
			string.sub!(/(\S+)(\s+|$)/,'')
			chunk = $1
			if chunk.nil?
				break
			end
			if newstring.size + chunk.size > @@length
				strings.push newstring
				newstring = chunk
			else
				newstring += " " + chunk
			end
		end
		strings.push newstring

		return strings.join("\n\t\t")
	end
end

module Oid
	@@base = "1.1.1.1"
	@@incr = 0

	def Oid.next
		@@incr += 1
		return "#{@@base}.#{@@incr}"
	end
end

class Attribute
	attr_reader :name

	@@attrs = Hash.new

	def Attribute.create(attr,type)
		name = attr.id2name
		unless @@attrs.include?(name)
			Attribute.new(name)
		end
	end

	def Attribute.to_s
		#@@attrs.sort!
		return @@attrs.sort.collect { |attr,obj|
			obj.to_s
		}.join('')
	end

	def <=>(other)
		self.name <=> other.name
	end

	def getdata
		hash = Syntax.config(@type)
		@syntax = hash[:syntax]
		@equality = hash[:equality]

		if hash.include?(:substr)
			@substr = hash[:substr]
		end
	end

	def initialize(name,type = :string)
		@@attrs[name] = self

		@name = name
		@type = type
		@oid = Oid.next

		self.getdata
	end

	def to_s
		return %{attributetype ( #{@oid} NAME 'nagios_#{@name}'
	DESC 'Nagios Attribute #{@name}'
	EQUALITY #{@equality}
	SYNTAX #{@syntax} SINGLE-VALUE )

}
	end
end

class Objectclass
	attr_reader :name

	@@classes = Array.new

    def self.each
        @@classes.each do |obj| yield obj end
    end

	def Objectclass.to_s
		#@@classes.sort!
		@@classes.sort.each { |klass|
			klass.to_s
		}
	end

	def <=>(other)
		self.name <=> other.name
	end

	def initialize(type)
		@@classes.push self
		@oid = Oid.next
		@name = type.name.to_s
		@params = type.parameters.collect { |param|
            Attribute.new(param.to_s)
            "nagios_" + param.to_s
        }
	end

	def to_s
		return %{objectclass ( #{@oid} NAME '#{"nagios_" + @name}' SUP top AUXILIARY
	DESC 'Nagios Class #{@name}'
	MAY ( } + Fun.pprint(@params.sort.join(' $ ') + " ) )") + "\n\n"
	end
end

Nagios::Base.eachtype do |name, type|
    klass = Objectclass.new(type)
end

puts Attribute.to_s
puts Objectclass.to_s

#Objectclass.each do |obj|
#    puts obj.to_s
#end

# $Id: mkschema,v 1.1 2004/03/04 03:18:49 luke Exp $
